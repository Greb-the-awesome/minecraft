# imports
from OpenGLContext import testingcontext
from OpenGL.GL import *
from OpenGL.arrays import vbo
from OpenGLContext.arrays import *
from OpenGL.GL import shaders

# setup stuffs
BaseContext = testingcontext.getInteractive()

# s h a d e r s  you will not escape shaders
VERTEX_SHADER = """
#version 120
void main() {
    gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;
}
"""
FRAGMENT_SHADER = """
#version 120
void main() {
    gl_FragColor = vec4( 0, 1, 0, 1 );
}
"""

class TestContext(BaseContext):
    def OnInit(self):
        self.compiled_vertex_shader = shaders.compileShader(VERTEX_SHADER, GL_VERTEX_SHADER)
        self.compiled_fragment_shader = shaders.compileShader(FRAGMENT_SHADER, GL_VERTEX_SHADER)
        self.shader = shaders.compileProgram(compiled_vertex_shader, compiled_fragment_shader)
        self.vbo = vbo.VBO(
            array([
                [  0, 1, 0 ],
                [ -1,-1, 0 ],
                [  1,-1, 0 ],
                [  2,-1, 0 ],
                [  4,-1, 0 ],
                [  4, 1, 0 ],
                [  2,-1, 0 ],
                [  4, 1, 0 ],
                [  2, 1, 0 ],
            ], "f")
        )
    def Render(self, mode):
        shaders.glUseProgram(self.shader)
        try:
            self.vbo.bind()
            try:
                glEnableClientState(GL_VERTEX_ARRAY)
                glVertexPointerf(self.vbo)
                glDrawArrays(GL_TRIANGLES, 0, 9)
            finally:
                self.vbo.unbind()
                glDisableClientState(GL_VERTEX_ARRAY)
        finally:
            shaders.glUseProgram(0)

if __name__ == "__main__":
    TestContext.ContextMainLoop()